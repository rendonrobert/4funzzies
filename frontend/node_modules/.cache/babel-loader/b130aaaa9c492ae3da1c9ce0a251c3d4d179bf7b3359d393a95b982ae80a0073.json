{"ast":null,"code":"import React from'react';import{useAudioRecorder}from'../hooks/useAudioRecorder';import{identifySong}from'../services/songService';import{RainbowButton}from'./RainbowButton';import{jsx as _jsx}from\"react/jsx-runtime\";const AudioRecorder=_ref=>{let{onSongRecognized}=_ref;const{startRecording,isRecording,audioBlob,reset}=useAudioRecorder();const handleClick=async()=>{if(isRecording)return;try{await startRecording();}catch(err){console.error('Failed to start recording:',err);}};React.useEffect(()=>{const identifyAudio=async()=>{if(audioBlob&&!isRecording){try{const song=await identifySong(audioBlob);onSongRecognized(song);reset();}catch(err){console.error('Failed to identify song:',err);reset();}}};identifyAudio();},[audioBlob,isRecording,onSongRecognized,reset]);return/*#__PURE__*/_jsx(RainbowButton,{onClick:handleClick,isListening:isRecording});};export default AudioRecorder;","map":{"version":3,"names":["React","useAudioRecorder","identifySong","RainbowButton","jsx","_jsx","AudioRecorder","_ref","onSongRecognized","startRecording","isRecording","audioBlob","reset","handleClick","err","console","error","useEffect","identifyAudio","song","onClick","isListening"],"sources":["/Users/4funzzies/Desktop/Claude/App/frontend/src/components/AudioRecorder.tsx"],"sourcesContent":["import React from 'react';\nimport { useAudioRecorder } from '../hooks/useAudioRecorder';\nimport { identifySong } from '../services/songService';\nimport { Song } from '../types/song';\nimport { RainbowButton } from './RainbowButton';\n\ninterface AudioRecorderProps {\n  onSongRecognized: (song: Song) => void;\n}\n\nconst AudioRecorder: React.FC<AudioRecorderProps> = ({ onSongRecognized }) => {\n  const { startRecording, isRecording, audioBlob, reset } = useAudioRecorder();\n\n  const handleClick = async () => {\n    if (isRecording) return;\n    \n    try {\n      await startRecording();\n    } catch (err) {\n      console.error('Failed to start recording:', err);\n    }\n  };\n\n  React.useEffect(() => {\n    const identifyAudio = async () => {\n      if (audioBlob && !isRecording) {\n        try {\n          const song = await identifySong(audioBlob);\n          onSongRecognized(song);\n          reset();\n        } catch (err) {\n          console.error('Failed to identify song:', err);\n          reset();\n        }\n      }\n    };\n\n    identifyAudio();\n  }, [audioBlob, isRecording, onSongRecognized, reset]);\n\n  return (\n    <RainbowButton onClick={handleClick} isListening={isRecording} />\n  );\n};\n\nexport default AudioRecorder;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,gBAAgB,KAAQ,2BAA2B,CAC5D,OAASC,YAAY,KAAQ,yBAAyB,CAEtD,OAASC,aAAa,KAAQ,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAMhD,KAAM,CAAAC,aAA2C,CAAGC,IAAA,EAA0B,IAAzB,CAAEC,gBAAiB,CAAC,CAAAD,IAAA,CACvE,KAAM,CAAEE,cAAc,CAAEC,WAAW,CAAEC,SAAS,CAAEC,KAAM,CAAC,CAAGX,gBAAgB,CAAC,CAAC,CAE5E,KAAM,CAAAY,WAAW,CAAG,KAAAA,CAAA,GAAY,CAC9B,GAAIH,WAAW,CAAE,OAEjB,GAAI,CACF,KAAM,CAAAD,cAAc,CAAC,CAAC,CACxB,CAAE,MAAOK,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,4BAA4B,CAAEF,GAAG,CAAC,CAClD,CACF,CAAC,CAEDd,KAAK,CAACiB,SAAS,CAAC,IAAM,CACpB,KAAM,CAAAC,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAIP,SAAS,EAAI,CAACD,WAAW,CAAE,CAC7B,GAAI,CACF,KAAM,CAAAS,IAAI,CAAG,KAAM,CAAAjB,YAAY,CAACS,SAAS,CAAC,CAC1CH,gBAAgB,CAACW,IAAI,CAAC,CACtBP,KAAK,CAAC,CAAC,CACT,CAAE,MAAOE,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAEF,GAAG,CAAC,CAC9CF,KAAK,CAAC,CAAC,CACT,CACF,CACF,CAAC,CAEDM,aAAa,CAAC,CAAC,CACjB,CAAC,CAAE,CAACP,SAAS,CAAED,WAAW,CAAEF,gBAAgB,CAAEI,KAAK,CAAC,CAAC,CAErD,mBACEP,IAAA,CAACF,aAAa,EAACiB,OAAO,CAAEP,WAAY,CAACQ,WAAW,CAAEX,WAAY,CAAE,CAAC,CAErE,CAAC,CAED,cAAe,CAAAJ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}