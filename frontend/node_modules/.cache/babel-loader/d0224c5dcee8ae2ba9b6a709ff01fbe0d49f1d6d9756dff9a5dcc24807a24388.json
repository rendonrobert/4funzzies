{"ast":null,"code":"// Define return type for the function\nexport async function getBrightestColor(imageUrl) {\n  return new Promise(resolve => {\n    const img = new Image();\n    img.crossOrigin = \"Anonymous\";\n    img.onload = () => {\n      // Create canvas\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      if (!context) {\n        resolve('rgb(255, 255, 255)'); // Fallback to white\n        return;\n      }\n      canvas.width = img.width;\n      canvas.height = img.height;\n\n      // Draw image to canvas\n      context.drawImage(img, 0, 0);\n      try {\n        // Get image data\n        const imageData = context.getImageData(0, 0, canvas.width, canvas.height).data;\n        let maxBrightness = 0;\n        let brightestRGB = {\n          r: 255,\n          g: 255,\n          b: 255\n        }; // Default to white\n\n        // Analyze every pixel\n        for (let i = 0; i < imageData.length; i += 4) {\n          const r = imageData[i];\n          const g = imageData[i + 1];\n          const b = imageData[i + 2];\n\n          // Calculate perceived brightness\n          const brightness = 0.299 * r + 0.587 * g + 0.114 * b;\n          if (brightness > maxBrightness) {\n            maxBrightness = brightness;\n            brightestRGB = {\n              r,\n              g,\n              b\n            };\n          }\n        }\n        resolve(`rgb(${brightestRGB.r}, ${brightestRGB.g}, ${brightestRGB.b})`);\n      } catch (error) {\n        resolve('rgb(255, 255, 255)'); // Fallback to white\n      }\n    };\n    img.onerror = () => {\n      resolve('rgb(255, 255, 255)'); // Fallback to white\n    };\n    img.src = imageUrl;\n  });\n}","map":{"version":3,"names":["getBrightestColor","imageUrl","Promise","resolve","img","Image","crossOrigin","onload","canvas","document","createElement","context","getContext","width","height","drawImage","imageData","getImageData","data","maxBrightness","brightestRGB","r","g","b","i","length","brightness","error","onerror","src"],"sources":["/Users/4funzzies/Desktop/Claude/App1 copy/frontend/src/utils/colorUtils.ts"],"sourcesContent":["// Define return type for the function\nexport async function getBrightestColor(imageUrl: string): Promise<string> {\n  return new Promise((resolve) => {\n    const img = new Image();\n    img.crossOrigin = \"Anonymous\";\n    \n    img.onload = () => {\n      // Create canvas\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      \n      if (!context) {\n        resolve('rgb(255, 255, 255)'); // Fallback to white\n        return;\n      }\n\n      canvas.width = img.width;\n      canvas.height = img.height;\n      \n      // Draw image to canvas\n      context.drawImage(img, 0, 0);\n      \n      try {\n        // Get image data\n        const imageData = context.getImageData(0, 0, canvas.width, canvas.height).data;\n        let maxBrightness = 0;\n        let brightestRGB = { r: 255, g: 255, b: 255 }; // Default to white\n        \n        // Analyze every pixel\n        for (let i = 0; i < imageData.length; i += 4) {\n          const r = imageData[i];\n          const g = imageData[i + 1];\n          const b = imageData[i + 2];\n          \n          // Calculate perceived brightness\n          const brightness = (0.299 * r + 0.587 * g + 0.114 * b);\n          \n          if (brightness > maxBrightness) {\n            maxBrightness = brightness;\n            brightestRGB = { r, g, b };\n          }\n        }\n        \n        resolve(`rgb(${brightestRGB.r}, ${brightestRGB.g}, ${brightestRGB.b})`);\n      } catch (error) {\n        resolve('rgb(255, 255, 255)'); // Fallback to white\n      }\n    };\n\n    img.onerror = () => {\n      resolve('rgb(255, 255, 255)'); // Fallback to white\n    };\n\n    img.src = imageUrl;\n  });\n}"],"mappings":"AAAA;AACA,OAAO,eAAeA,iBAAiBA,CAACC,QAAgB,EAAmB;EACzE,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9B,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;IACvBD,GAAG,CAACE,WAAW,GAAG,WAAW;IAE7BF,GAAG,CAACG,MAAM,GAAG,MAAM;MACjB;MACA,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/C,MAAMC,OAAO,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;MAEvC,IAAI,CAACD,OAAO,EAAE;QACZR,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;QAC/B;MACF;MAEAK,MAAM,CAACK,KAAK,GAAGT,GAAG,CAACS,KAAK;MACxBL,MAAM,CAACM,MAAM,GAAGV,GAAG,CAACU,MAAM;;MAE1B;MACAH,OAAO,CAACI,SAAS,CAACX,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;MAE5B,IAAI;QACF;QACA,MAAMY,SAAS,GAAGL,OAAO,CAACM,YAAY,CAAC,CAAC,EAAE,CAAC,EAAET,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC,CAACI,IAAI;QAC9E,IAAIC,aAAa,GAAG,CAAC;QACrB,IAAIC,YAAY,GAAG;UAAEC,CAAC,EAAE,GAAG;UAAEC,CAAC,EAAE,GAAG;UAAEC,CAAC,EAAE;QAAI,CAAC,CAAC,CAAC;;QAE/C;QACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,SAAS,CAACS,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;UAC5C,MAAMH,CAAC,GAAGL,SAAS,CAACQ,CAAC,CAAC;UACtB,MAAMF,CAAC,GAAGN,SAAS,CAACQ,CAAC,GAAG,CAAC,CAAC;UAC1B,MAAMD,CAAC,GAAGP,SAAS,CAACQ,CAAC,GAAG,CAAC,CAAC;;UAE1B;UACA,MAAME,UAAU,GAAI,KAAK,GAAGL,CAAC,GAAG,KAAK,GAAGC,CAAC,GAAG,KAAK,GAAGC,CAAE;UAEtD,IAAIG,UAAU,GAAGP,aAAa,EAAE;YAC9BA,aAAa,GAAGO,UAAU;YAC1BN,YAAY,GAAG;cAAEC,CAAC;cAAEC,CAAC;cAAEC;YAAE,CAAC;UAC5B;QACF;QAEApB,OAAO,CAAC,OAAOiB,YAAY,CAACC,CAAC,KAAKD,YAAY,CAACE,CAAC,KAAKF,YAAY,CAACG,CAAC,GAAG,CAAC;MACzE,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdxB,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;MACjC;IACF,CAAC;IAEDC,GAAG,CAACwB,OAAO,GAAG,MAAM;MAClBzB,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;IACjC,CAAC;IAEDC,GAAG,CAACyB,GAAG,GAAG5B,QAAQ;EACpB,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}