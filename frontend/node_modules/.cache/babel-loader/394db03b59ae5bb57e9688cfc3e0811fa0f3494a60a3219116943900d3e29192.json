{"ast":null,"code":"var _jsxFileName = \"/Users/4funzzies/Desktop/Claude/App1 copy/frontend/src/components/AudioRecorder.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useAudioRecorder } from '../hooks/useAudioRecorder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioRecorder = ({\n  onSongRecognized,\n  className = ''\n}) => {\n  _s();\n  const {\n    startRecording,\n    isRecording,\n    audioBlob,\n    reset\n  } = useAudioRecorder();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState(null);\n  const buttonRef = useRef(null);\n  const progressRef = useRef(0);\n  const animationRef = useRef();\n  useEffect(() => {\n    if (isRecording) {\n      // Start progress animation\n      let startTime = performance.now();\n      const duration = 12000; // 12 seconds\n\n      const animate = currentTime => {\n        const elapsed = currentTime - startTime;\n        const progress = Math.min(elapsed / duration * 100, 100);\n        if (buttonRef.current) {\n          buttonRef.current.style.setProperty('--progress', `${progress}%`);\n        }\n        progressRef.current = progress;\n        if (progress < 100 && isRecording) {\n          animationRef.current = requestAnimationFrame(animate);\n        }\n      };\n      animationRef.current = requestAnimationFrame(animate);\n\n      // Reset after 12 seconds\n      setTimeout(() => {\n        if (buttonRef.current) {\n          buttonRef.current.style.setProperty('--progress', '0%');\n        }\n      }, duration);\n    } else {\n      // Reset progress when recording stops\n      if (buttonRef.current) {\n        buttonRef.current.style.setProperty('--progress', '0%');\n      }\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    }\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [isRecording]);\n  useEffect(() => {\n    if (!isRecording && audioBlob) {\n      handleRecognition();\n    }\n  }, [isRecording, audioBlob]);\n  const handleRecognition = async () => {\n    if (!audioBlob) return;\n    setIsProcessing(true);\n    setError(null);\n    const formData = new FormData();\n    formData.append('file', audioBlob);\n    try {\n      const response = await fetch('http://localhost:8000/api/identify', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to identify song');\n      }\n      const result = await response.json();\n      onSongRecognized(result);\n    } catch (error) {\n      console.error('Error during recognition:', error);\n      setError(error instanceof Error ? error.message : 'Failed to identify song');\n    } finally {\n      setIsProcessing(false);\n      reset();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `text-center ${className}`,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      ref: buttonRef,\n      onClick: () => !isRecording && !isProcessing && startRecording(),\n      className: `button-85 ${isRecording ? 'recording' : ''}`,\n      disabled: isRecording || isProcessing,\n      role: \"button\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: isRecording || isProcessing ? 'Analyzing...' : 'ID Song ðŸŽ§'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-2 text-red-400 text-sm\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioRecorder, \"EmiXI8BR5yglNGooQ60B2BAdBIk=\", false, function () {\n  return [useAudioRecorder];\n});\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useAudioRecorder","jsxDEV","_jsxDEV","AudioRecorder","onSongRecognized","className","_s","startRecording","isRecording","audioBlob","reset","isProcessing","setIsProcessing","error","setError","buttonRef","progressRef","animationRef","startTime","performance","now","duration","animate","currentTime","elapsed","progress","Math","min","current","style","setProperty","requestAnimationFrame","setTimeout","cancelAnimationFrame","handleRecognition","formData","FormData","append","response","fetch","method","body","ok","errorData","json","Error","detail","result","console","message","children","ref","onClick","disabled","role","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/4funzzies/Desktop/Claude/App1 copy/frontend/src/components/AudioRecorder.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useAudioRecorder } from '../hooks/useAudioRecorder';\nimport { SongData } from '../types/song';\n\ninterface AudioRecorderProps {\n  onSongRecognized: (songInfo: SongData) => void;\n  className?: string;\n}\n\nconst AudioRecorder: React.FC<AudioRecorderProps> = ({ \n  onSongRecognized,\n  className = ''\n}) => {\n  const { startRecording, isRecording, audioBlob, reset } = useAudioRecorder();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const progressRef = useRef<number>(0);\n  const animationRef = useRef<number>();\n\n  useEffect(() => {\n    if (isRecording) {\n      // Start progress animation\n      let startTime = performance.now();\n      const duration = 12000; // 12 seconds\n\n      const animate = (currentTime: number) => {\n        const elapsed = currentTime - startTime;\n        const progress = Math.min((elapsed / duration) * 100, 100);\n        \n        if (buttonRef.current) {\n          buttonRef.current.style.setProperty('--progress', `${progress}%`);\n        }\n\n        progressRef.current = progress;\n\n        if (progress < 100 && isRecording) {\n          animationRef.current = requestAnimationFrame(animate);\n        }\n      };\n\n      animationRef.current = requestAnimationFrame(animate);\n\n      // Reset after 12 seconds\n      setTimeout(() => {\n        if (buttonRef.current) {\n          buttonRef.current.style.setProperty('--progress', '0%');\n        }\n      }, duration);\n    } else {\n      // Reset progress when recording stops\n      if (buttonRef.current) {\n        buttonRef.current.style.setProperty('--progress', '0%');\n      }\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    }\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [isRecording]);\n\n  useEffect(() => {\n    if (!isRecording && audioBlob) {\n      handleRecognition();\n    }\n  }, [isRecording, audioBlob]);\n\n  const handleRecognition = async () => {\n    if (!audioBlob) return;\n    setIsProcessing(true);\n    setError(null);\n\n    const formData = new FormData();\n    formData.append('file', audioBlob);\n\n    try {\n      const response = await fetch('http://localhost:8000/api/identify', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to identify song');\n      }\n\n      const result = await response.json();\n      onSongRecognized(result);\n    } catch (error) {\n      console.error('Error during recognition:', error);\n      setError(error instanceof Error ? error.message : 'Failed to identify song');\n    } finally {\n      setIsProcessing(false);\n      reset();\n    }\n  };\n\n  return (\n    <div className={`text-center ${className}`}>\n      <button\n        ref={buttonRef}\n        onClick={() => !isRecording && !isProcessing && startRecording()}\n        className={`button-85 ${isRecording ? 'recording' : ''}`}\n        disabled={isRecording || isProcessing}\n        role=\"button\"\n      >\n        <span>\n          {isRecording || isProcessing ? 'Analyzing...' : 'ID Song ðŸŽ§'}\n        </span>\n      </button>\n      {error && (\n        <div className=\"mt-2 text-red-400 text-sm\">\n          {error}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}