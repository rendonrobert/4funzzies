{"ast":null,"code":"export async function identifySong(audioBlob){const formData=new FormData();formData.append('file',audioBlob,'recording.webm');const response=await fetch('http://localhost:8000/api/identify',{method:'POST',body:formData});if(!response.ok){throw new Error('Failed to identify song');}return response.json();}","map":{"version":3,"names":["identifySong","audioBlob","formData","FormData","append","response","fetch","method","body","ok","Error","json"],"sources":["/Users/4funzzies/Desktop/Claude/App/frontend/src/services/songService.ts"],"sourcesContent":["import { Song } from '../types/song';\n\nexport async function identifySong(audioBlob: Blob): Promise<Song> {\n  const formData = new FormData();\n  formData.append('file', audioBlob, 'recording.webm');\n\n  const response = await fetch('http://localhost:8000/api/identify', {\n    method: 'POST',\n    body: formData,\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to identify song');\n  }\n\n  return response.json();\n}"],"mappings":"AAEA,MAAO,eAAe,CAAAA,YAAYA,CAACC,SAAe,CAAiB,CACjE,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAEH,SAAS,CAAE,gBAAgB,CAAC,CAEpD,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,oCAAoC,CAAE,CACjEC,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEN,QACR,CAAC,CAAC,CAEF,GAAI,CAACG,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,yBAAyB,CAAC,CAC5C,CAEA,MAAO,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}