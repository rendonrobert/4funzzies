{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useRef, useEffect } from 'react';\nconst RECORDING_DURATION = 12000; // 12 seconds in milliseconds\n\nexport const useAudioRecorder = () => {\n  _s();\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const timerRef = useRef(null);\n  const streamRef = useRef(null);\n  const reset = useCallback(() => {\n    setIsRecording(false);\n    setAudioBlob(null);\n    setMediaRecorder(null);\n    if (timerRef.current) {\n      window.clearTimeout(timerRef.current);\n      timerRef.current = null;\n    }\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n  }, []);\n  useEffect(() => {\n    return () => {\n      reset();\n    };\n  }, [reset]);\n  const stopRecording = useCallback(() => {\n    if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n      mediaRecorder.stop();\n      setIsRecording(false);\n    }\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n    }\n  }, [mediaRecorder]);\n  const startRecording = useCallback(async () => {\n    try {\n      reset();\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      streamRef.current = stream;\n      const recorder = new MediaRecorder(stream);\n      const chunks = [];\n      recorder.ondataavailable = e => {\n        if (e.data.size > 0) {\n          chunks.push(e.data);\n        }\n      };\n      recorder.onstop = () => {\n        const blob = new Blob(chunks, {\n          type: 'audio/webm'\n        });\n        setAudioBlob(blob);\n        setIsRecording(false);\n        if (streamRef.current) {\n          streamRef.current.getTracks().forEach(track => track.stop());\n        }\n      };\n\n      // Request data every second to ensure we capture everything\n      recorder.start(1000);\n      setMediaRecorder(recorder);\n      setIsRecording(true);\n\n      // Force stop after exactly 12 seconds\n      timerRef.current = window.setTimeout(() => {\n        stopRecording();\n      }, RECORDING_DURATION);\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      reset();\n    }\n  }, [reset, stopRecording]);\n  return {\n    startRecording,\n    isRecording,\n    audioBlob,\n    reset\n  };\n};\n_s(useAudioRecorder, \"mJzbK2RbmHOzUMU9vlkKUdv4tPo=\");","map":{"version":3,"names":["useState","useCallback","useRef","useEffect","RECORDING_DURATION","useAudioRecorder","_s","mediaRecorder","setMediaRecorder","isRecording","setIsRecording","audioBlob","setAudioBlob","timerRef","streamRef","reset","current","window","clearTimeout","getTracks","forEach","track","stop","stopRecording","state","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","recorder","MediaRecorder","chunks","ondataavailable","e","data","size","push","onstop","blob","Blob","type","start","setTimeout","error","console"],"sources":["/Users/4funzzies/Desktop/Claude/App1 copy/frontend/src/hooks/useAudioRecorder.ts"],"sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\n\ninterface AudioRecorderHook {\n  startRecording: () => Promise<void>;\n  isRecording: boolean;\n  audioBlob: Blob | null;\n  reset: () => void;\n}\n\nconst RECORDING_DURATION = 12000; // 12 seconds in milliseconds\n\nexport const useAudioRecorder = (): AudioRecorderHook => {\n  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);\n  const timerRef = useRef<number | null>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n\n  const reset = useCallback(() => {\n    setIsRecording(false);\n    setAudioBlob(null);\n    setMediaRecorder(null);\n    if (timerRef.current) {\n      window.clearTimeout(timerRef.current);\n      timerRef.current = null;\n    }\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      reset();\n    };\n  }, [reset]);\n\n  const stopRecording = useCallback(() => {\n    if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n      mediaRecorder.stop();\n      setIsRecording(false);\n    }\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n    }\n  }, [mediaRecorder]);\n\n  const startRecording = useCallback(async () => {\n    try {\n      reset();\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      streamRef.current = stream;\n      \n      const recorder = new MediaRecorder(stream);\n      const chunks: BlobPart[] = [];\n\n      recorder.ondataavailable = (e) => {\n        if (e.data.size > 0) {\n          chunks.push(e.data);\n        }\n      };\n\n      recorder.onstop = () => {\n        const blob = new Blob(chunks, { type: 'audio/webm' });\n        setAudioBlob(blob);\n        setIsRecording(false);\n        if (streamRef.current) {\n          streamRef.current.getTracks().forEach(track => track.stop());\n        }\n      };\n\n      // Request data every second to ensure we capture everything\n      recorder.start(1000);\n      setMediaRecorder(recorder);\n      setIsRecording(true);\n\n      // Force stop after exactly 12 seconds\n      timerRef.current = window.setTimeout(() => {\n        stopRecording();\n      }, RECORDING_DURATION);\n\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      reset();\n    }\n  }, [reset, stopRecording]);\n\n  return {\n    startRecording,\n    isRecording,\n    audioBlob,\n    reset\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}