{"ast":null,"code":"var _jsxFileName = \"/Users/4funzzies/Desktop/Claude/App1/frontend/src/components/AudioRecorder.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useAudioRecorder } from '../hooks/useAudioRecorder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioRecorder = ({\n  onSongRecognized,\n  className = ''\n}) => {\n  _s();\n  const {\n    startRecording,\n    stopRecording,\n    isRecording,\n    audioBlob\n  } = useAudioRecorder();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (audioBlob) {\n      handleRecognition();\n    }\n  }, [audioBlob]);\n  const handleRecognition = async () => {\n    if (!audioBlob) return;\n    setIsProcessing(true);\n    setError(null);\n    const formData = new FormData();\n    formData.append('file', audioBlob);\n    try {\n      const response = await fetch('http://localhost:8000/api/identify', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to identify song');\n      }\n      const result = await response.json();\n\n      // Transform the result to match SongData interface\n      const songInfo = {\n        title: result.title || 'Unknown Title',\n        artist: result.artist || 'Unknown Artist',\n        album: result.album || '',\n        album_art: result.album_art || '',\n        lyrics: result.lyrics || [],\n        has_subtitles: result.has_subtitles || false\n      };\n      onSongRecognized(songInfo);\n    } catch (error) {\n      console.error('Error during recognition:', error);\n      setError(error instanceof Error ? error.message : 'Failed to identify song');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `audio-recorder ${className}`,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isRecording ? stopRecording : startRecording,\n      className: `control-btn ${isRecording ? 'recording' : ''} ${isProcessing ? 'processing' : ''}`,\n      disabled: isProcessing,\n      children: isProcessing ? 'Identifying...' : isRecording ? 'Stop Recording' : 'Identify Song'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioRecorder, \"UZPeHRmp46YD8O2DCVYio/ha0Ts=\", false, function () {\n  return [useAudioRecorder];\n});\n_c = AudioRecorder;\nexport default AudioRecorder;\nvar _c;\n$RefreshReg$(_c, \"AudioRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useAudioRecorder","jsxDEV","_jsxDEV","AudioRecorder","onSongRecognized","className","_s","startRecording","stopRecording","isRecording","audioBlob","isProcessing","setIsProcessing","error","setError","handleRecognition","formData","FormData","append","response","fetch","method","body","ok","errorData","json","Error","detail","result","songInfo","title","artist","album","album_art","lyrics","has_subtitles","console","message","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/4funzzies/Desktop/Claude/App1/frontend/src/components/AudioRecorder.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useAudioRecorder } from '../hooks/useAudioRecorder';\nimport { SongData } from '../types/song';\n\ninterface AudioRecorderProps {\n  onSongRecognized: (songInfo: SongData) => void;\n  className?: string;\n}\n\nconst AudioRecorder: React.FC<AudioRecorderProps> = ({ \n  onSongRecognized,\n  className = ''\n}) => {\n  const { startRecording, stopRecording, isRecording, audioBlob } = useAudioRecorder();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (audioBlob) {\n      handleRecognition();\n    }\n  }, [audioBlob]);\n\n  const handleRecognition = async () => {\n    if (!audioBlob) return;\n    setIsProcessing(true);\n    setError(null);\n\n    const formData = new FormData();\n    formData.append('file', audioBlob);\n\n    try {\n      const response = await fetch('http://localhost:8000/api/identify', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to identify song');\n      }\n\n      const result = await response.json();\n      \n      // Transform the result to match SongData interface\n      const songInfo: SongData = {\n        title: result.title || 'Unknown Title',\n        artist: result.artist || 'Unknown Artist',\n        album: result.album || '',\n        album_art: result.album_art || '',\n        lyrics: result.lyrics || [],\n        has_subtitles: result.has_subtitles || false\n      };\n      \n      onSongRecognized(songInfo);\n    } catch (error) {\n      console.error('Error during recognition:', error);\n      setError(error instanceof Error ? error.message : 'Failed to identify song');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <div className={`audio-recorder ${className}`}>\n      <button\n        onClick={isRecording ? stopRecording : startRecording}\n        className={`control-btn ${isRecording ? 'recording' : ''} ${isProcessing ? 'processing' : ''}`}\n        disabled={isProcessing}\n      >\n        {isProcessing ? 'Identifying...' : isRecording ? 'Stop Recording' : 'Identify Song'}\n      </button>\n      {error && (\n        <div className=\"error-message\">\n          {error}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioRecorder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}